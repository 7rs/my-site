---
import { getCollection } from "astro:content";
import { fade } from "astro:transitions";

import { websiteSchema } from "@lib/meta";
import { personSchema, Assignee } from "@scripts/lib/schema";
import { getFont } from "@lib/font"

import Meta from "@layouts/Meta.astro";
import Header from "@layouts/Header.astro";
import Footer from "@layouts/Footer.astro";
import Sidebar from "@layouts/Sidebar.astro";

import PostInfo from "@layouts-components/blog/postInfo.astro"

import logo from "@icons/colored-7rs.svg";

export interface Props {
  frontmatter: { [key: string ]: any };
  headings: { depth: number; slug: string; text: string }[];
}
const { frontmatter, headings, ...props } = Astro.props;

const authors = {
  "Cbrnex": personSchema.parse({
    name: "Cbrnex",
    alternateName: "7rs",
    image: "https://www.gravatar.com/avatar/1b6f182a11eba357a5b85085b74acccd",
    url: "https://7rs.dev/",
    sameAs: "https://github.com/7rs",
    jobTitle: "Student",
  })
}

// frontmatter doesn't support zod's `.default`.
// "it supports all of the features of Zod"
// Ok, Astro lied.
const posts = await getCollection("blog", data => frontmatter.url.endsWith(data.slug));
const authorNames = posts.map(post => post.data.authors)[0]
let authorsSchema: Assignee[] = []
authorNames.map(name => authors[name] && authorsSchema.push(authors[name]))

const meta = websiteSchema.parse({
    "name": "7rs.dev",
    "description": "No ads, No paid, No morals.",
    "url": "https://7rs.dev/",
    "author": "Cbrnex",
    "image": logo.src,
    "imageAlt": "7rs logo",
    "keywords": [],
    "twitterId": "qlzegg"
});
---

<!doctype html>
<html lang={frontmatter.lang || "ja"}>
  <Meta
    fonts={[
      getFont("Fira Sans", [{}, {typefaces: 1}, {weight: 700}, {weight: 700, typefaces: 1}]),
      getFont("Fira Code"),
    ]}
    meta={meta}
    title={frontmatter.title}
    favicon={logo.src}
    noIndex={!frontmatter.published}
    author={authorsSchema}
    datePublished={frontmatter.published_at}
    dateModified={frontmatter.updated_at}
  />

  <body class="markdown system">
    <Header transition:persist />
    <div main-content>
      <main
        {...props}
        transition:animate={fade({ duration: "0.1s" })}
        data-pagefind-body={frontmatter.published ? "" : undefined}
      >
        <PostInfo frontmatter={frontmatter} />
        <slot />
      </main>
      <Sidebar frontmatter={frontmatter} headings={headings} />
    </div>
    <Footer transition:persist />
  </body>
</html>

<style lang="stylus" is:global>
  @import "../styles/api.styl"
  body.markdown
    box-sizing border-box

    div[main-content]
      box-sizing border-box
      flex()
      justify-content center
      width 100%
      padding-left 1rem

      main
        box-sizing border-box

      aside
        width auto
        box-sizing border-box

</style>
