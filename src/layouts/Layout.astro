---
import { fade, slide } from 'astro:transitions';
import { getImage } from 'astro:assets'

import { websiteSchema, Website } from '@lib/meta';
import { personSchema, Assignee } from '@lib/schema';
import { getFont } from '@lib/font';

import Meta from '@layouts/Meta.astro';
import Header from '@layouts/Header.astro';
import Footer from '@layouts/Footer.astro';

import logo from '@icons/colored-7rs.svg';
import defaultLight from '@assets/background/yZygONrUBe8.jpg';
import defaultDark from '@assets/background/Q1p7bh3SHj8.jpg';

import '@styles/default.styl'

export interface Props {
  title?: string;
  locale?: string;
  fonts?: Array<string>;
  noIndex?: boolean;
  light?: ImageMetadata;
  dark?: ImageMetadata;
  backgroundOptions?: { [key: string]: any},
  profile?: Assignee | Assignee[];
  meta?: Website;
}
const { 
  title = 'Pages - Fast and simple website.',
  locale = 'en',
  fonts = [getFont('Fira Sans', [{}, {weight: 700}, {weight: 900}])],
  noIndex = false,
  light = defaultLight,
  dark = defaultDark,
  backgroundOptions = { format: 'avif', quality: 70 },
  profile,
  meta,
  ...props 
} = Astro.props;

const resolution = 720

const lightBackgroundImage = await getImage({
  ...backgroundOptions,
  src: light,
  width: Math.trunc(resolution * (light.width / light.height))
})
const lightBackground = `url(${lightBackgroundImage.src})`

const darkBackgroundImage = await getImage({
  ...backgroundOptions,
  src: dark,
  width: Math.trunc(resolution * (dark.width / dark.height))
})
const darkBackground = `url(${darkBackgroundImage.src})`
---

<!doctype html>
<html lang={locale}>
  <Meta
    title={title}
    noIndex={noIndex}
    favicon={logo.src}
    fonts={fonts}
    images={[
      { format: backgroundOptions.format, src: lightBackgroundImage.src },
      { format: backgroundOptions.format, src: darkBackgroundImage.src }
    ]}
    meta={meta || websiteSchema.parse({
      'name': '7rs.dev',
      'description': 'No ads, No paid, No morals.',
      'url': 'https://7rs.dev/',
      'author': 'Cbrnex',
      'image': logo.src,
      'imageAlt': '7rs logo',
      'keywords': ['Cbrnex', '7rs', 'qÐ¯ze', 'MANJSRSU', 'Rynon'],
      'twitterId': 'qlzegg'
    })}
    profile={profile || personSchema.parse({
      name: 'Cbrnex',
      alternateName: '7rs',
      image: 'https://7rs.dev/avatar',
      url: 'https://7rs.dev/',
      sameAs: 'https://github.com/7rs',
      jobTitle: 'Student',
    })}
  />
  <body>
    <Header />
    <main data-pagefind-body={noIndex ? undefined : ''} {...props}>
      <slot />
    </main>
    <Footer />
  </body>
</html>

<style lang="stylus" is:global define:vars={{lightBackground, darkBackground}}>
  @import "../styles/api.styl"

  light-filter = grayscale(10%)
  dark-filter = brightness(75%)

  :root
    @media (prefers-color-scheme dark)
      --background-image var(--darkBackground)
      --background-filter dark-filter
    @media (prefers-color-scheme light)
      --background-image var(--lightBackground)
      --background-filter light-filter

  body:not(.markdown)
    &.light-mode
      --background-image var(--lightBackground)
      --background-filter light-filter
    &.dark-mode
      --background-image var(--darkBackground)
      --background-filter dark-filter

    z-index -1001
    position relative
    box-sizing border-box
    overflow-x clip
    min-height 100vh
    max-width 100%
    flex(column)
    scrollbar(5px)

    main
      z-index 0
      position relative
      flex-grow 1
      min-height 100%
      responsive-padding()
      padding-bottom 3rem
      flex(column, 3rem)

      &::before
        z-index -1002
        full-size-before()
        filter var(--background-filter)
        background var(--background-image) center/cover no-repeat fixed, var(--background)
</style>
