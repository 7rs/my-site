---
import { fade } from "astro:transitions";
import { getImage } from "astro:assets"
// Scripts
import { defaultLocale, setMetadataFromJSON } from "@lib/meta";
import { SchemaTypes, createSchema } from "@lib/schema";

// UI & Styling
import Meta from "@layouts/Meta.astro";
import Header from "@layouts/Header.astro";
import Footer from "@layouts/Footer.astro";
import "@styles/default.styl"

import defaultLight from "@assets/background/yZygONrUBe8.jpg";
import defaultDark from "@assets/background/Q1p7bh3SHj8.jpg";

// Receives props
export interface Props {
  title?: string;
  locale?: string;
  fonts?: Array<string>;
  schemaMarkup?: string;
  noIndex?: boolean;
  light?: ImageMetadata;
  dark?: ImageMetadata;
  backgroundOptions?: { [key: string]: any}
}
const { 
  title = "Pages - Fast and simple website.",
  locale = defaultLocale,
  fonts = ["Fira+Sans:wght@400;700;900"],
  schemaMarkup,
  noIndex = false,
  light = defaultLight,
  dark = defaultDark,
  backgroundOptions = { format: "avif", quality: 70 },
  ...props 
} = Astro.props;

// Loads configrations
import { pages } from "pages.json";
import logo from "@icons/colored-7rs.svg";
let metadata = setMetadataFromJSON(pages, logo.src, logo.src, "Cbrnex Logo");

const lightBackgroundImage = await getImage({
  ...backgroundOptions,
  src: light,
  width: Math.trunc(720 * (light.width / light.height))
})
const lightBackground = `url(${lightBackgroundImage.src})`

const darkBackgroundImage = await getImage({
  ...backgroundOptions,
  src: dark,
  width: Math.trunc(720 * (dark.width / dark.height))
})
const darkBackground = `url(${darkBackgroundImage.src})`
---

<!doctype html>
<html lang={locale}>
  <Meta title={title} metadata={metadata} fonts={fonts}>
    <script type="application/ld+json" set:html={schemaMarkup || createSchema(SchemaTypes.Profile, metadata)} />
    <link rel="prefetch" fetchpriority="high" as="image" type={`image/${light.format}`} href={defaultLight.src} />
    <link rel="prefetch" fetchpriority="high" as="image" type={`image/${dark.format}`} href={defaultLight.src} />
  </Meta>
  <body>
    <Header />
    <main {...props} transition:animate={fade({ duration: "0.1s" })} data-pagefind-body={noIndex ? undefined : ""}>
      <slot />
    </main>
    <Footer />
  </body>
</html>

<style lang="stylus" define:vars={{lightBackground, darkBackground}} is:global>
  @import "../styles/api.styl"

  light-filter = grayscale(10%)
  dark-filter = brightness(75%)

  :root
    @media (prefers-color-scheme dark)
      --background-image var(--darkBackground)
      --background-filter dark-filter
    @media (prefers-color-scheme light)
      --background-image var(--lightBackground)
      --background-filter light-filter

  body:not(.markdown)

    &.light-mode
      --background-image var(--lightBackground)
      --background-filter light-filter
    &.dark-mode
      --background-image var(--darkBackground)
      --background-filter dark-filter

    z-index -1001
    position relative
    box-sizing border-box
    overflow-x clip
    min-height 100vh
    max-width 100%
    flex(column)
    scrollbar(5px) // Chrome & Edge

    main
      z-index 0
      position relative
      flex-grow 1
      min-height 100%
      responsive-padding()
      padding-bottom 3rem
      flex(column, 3rem)

      &::before
        z-index -1002
        full-size-before()
        filter var(--background-filter)
        background var(--background-image) center/cover no-repeat fixed, var(--background)
</style>
